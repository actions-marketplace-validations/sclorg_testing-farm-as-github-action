name: 'Schedule tests on Testing Farm'
description: 'A GitHub action will schedule a user defined tests to the Testing Farm to run tmt tests.'
author: 'RHSCL team'
branding:
  icon: circle
  color: red

inputs:
  api_key:
    description: 'A testing farm API key'
    required: true
  tmt_repository:
    description: 'An url to tmt repository'
    required: true
  test_fmf_plan:
    required: false
    description: 'A fmf plan which will be selected. By default all plans are selected.'
  tests_tmt_ref:
    description: 'A tmt tests branch which will be used for tests'
    required: false
    default: 'master'
  compose:
    description: 'A compose for tests'
    default: 'Fedora'
    required: true
  create_issue_comment:
    description: 'It creates a github issue Comment'
    required: false
    default: 'false'
  pull_request_status_name:
    description: 'GitHub pull request status name'
    required: false
    default: 'Fedora'
  env_vars:
    description: 'Environment variables for test env, separated by ;'
    required: false
    default: ''
  env_secrets:
    description: 'Environment secrets for test env, separated by ;'
    required: false
    default: ''
  debug:
    description: 'Print debug logs when working with testing farm'
    required: false
    default: 'true'
  update_pull_request_status:
    description: 'Action will update pull request status. Default: true'
    required: false
    default: 'true'
  arch:
    description: 'Define an architecture for testing environment. Default: x86_64'
    required: false
    default: 'x86_64'
  copr:
    description: 'Name of copr to use for the artifacts'
    required: false
    default: 'epel-7-x86_64'
  test_artifacts:
    description: '"fedora-copr-build" artifacts for testing environment. Separated by ;'
    required: false
    default: ''
  tmt_context:
    description: 'A value of tmt.context variable https://tmt.readthedocs.io/en/latest/spec/context.html, variables separated by ;'
    required: false
    default: ''
outputs:
  request_id:
    description: 'An ID of a scheduled testing farm request'
    value: ${{ env.REQ_ID }}
  request_url:
    description: 'An url of a scheduled testing farm request'
    value: ${{ env.TF_URL }}
runs:
  using: "composite"
  steps:
    - name: Install mandatory packages
      run: |
        sudo apt update && sudo apt -y install curl jq

    - name: Get pull request number
      id: pr_nr
      run: |
        PR_URL="${{ github.event.comment.issue_url }}"
        echo "::set-output name=PR_NR::${PR_URL##*/}"

    - name: Get commit SHA value
      id: sha_value
      run: |
        echo "::set-output name=SHA::$(git re-parse HEAD)"

    - name: Generate tmt variables
      id: generate_tmt_vars
      run: |
        python -c 'import json; print({} if not "${{ inpust.env_vars }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inpust.env_vars }}".split(";")]}))' > env_vars
        echo "::set-output name=TMT_ENV_VARS::$(cat env_vars)"

    - name: Generate tmt secrets
      id: generate_tmt_secrets
      run: |
        python -c 'import json; print({} if not "${{ inpust.env_secrets }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inpust.env_secrets }}".split(";")]}))' > env_secrets
        echo "::set-output name=TMT_ENV_SECRETS::$(cat env_secrets)"

    - name: Generate tmt artifacts
      id: generate_tmt_artifacts
      run: |
        python -c 'import json;print(json.dumps(([{"type": "fedora-copr-build", "id": "{}:${{ inputs.copr }}".format(copr_id)} for copr_id in "${{ inputs.env_artifacts }}".split(";")])))' > artifacts
        echo "::set-output name=TMT_ENV_ARTIFACTS::$(cat env_artifacts)"

    - name: Generate tmt context
      id: generate_tmt_context
      run: |
        python -c 'import json; print({} if not "${{ inputs.tmt_context }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inputs.tmt_context }}".split(";")]}))' > tmt_context
        echo "::set-output name=TMT_CONTEXT::$(cat tmt_context)"

    - name: Schedule a test on Testing Farm
      id: sched_test
      run: |
        cat << EOF > request.json
        {
          "api_key": "${{ inputs.api_key }}",
          "test": { "fmf": {
              "url": "${{ inputs.tmt_repository }}",
              "ref": "${{ inputs.tmt_ref }}",
              "name": "{{ inputs.tests_tmt_ref }}",
            }
          },
          "environments": [{
            "arch": "${{ inputs.arch }}",
            "os": {
              "compose": "${{ inputs.compose }}"
            },
            "variables": "${{ steps.generate_tmt_vars.outputs.TMT_ENV_VARS }}",
            "secrets": "${{ steps.generate_tmt_secrets.outputs.TMT_ENV_SECRETS }}",
            "artifacts: "${{ steps.generate_tmt_artifacts.outputs.TMT_ENV_ARTIFACTS }}",
            "tmt": {
              "context": ${{ steps.generate_tmt_context.outputs.TMT_CONTEXT }}
            }
          }]
        }
        EOF
        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "Let's print request.json"
          cat request.json
        fi
        curl https://api.testing-farm.io/requests \
            --data @request.json \
            --header "Content-Type: application/json" \
            --output response.json
        
        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "Let's print testing farm response"
          cat response.json
          jq < response.json
        fi
        
        # Store REQ_ID into GITHUB_ENV variables
        req_id=$(jq -r .id response.json)
        tf_url=$(jq -r .run.artifacts response.json)
        echo "REQ_ID=$req_id" >> $GITHUB_ENV
        echo "TF_URL=$tf_url" >> $GITHUB_ENV

    - name: Switch pull request state to running
      id: running
      run: |
        if [ "${{ inputs.update_pull_request_status }}" == "true" ]; then
          # Create running.json file for query, whether job is finished or not.
          cat << EOF > running.json
          {
            "sha": "${{ steps.sha_value.outputs.SHA }}",
            "state": "pending",
            "context": "Testing Farm - ${{ inputs.pull_request_status_name }}",
            "description": "Build started",
            "target_url": "${{ env.TF_URL }}/${{ env.REQ_ID }}"
          }
          EOF
          # Update GitHub status description to 'Build started'
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/${{ steps.sha_value.outputs.SHA }} \
            --data @running.json
        fi

    - name: Check if scheduled test is still running
      id: still_running
      run: |
        CMD=https://api.testing-farm.io/requests/${{ env.REQ_ID }}
        curl $CMD > job.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat job.json
          jq < job.json
        fi
        state=$(jq -r .state job.json)
        while [ "$state" == "running" ] || [ "$state" == "new" ] || [ "$state" == "pending" ] || [ "$state" == "queued" ]; do
          sleep 30
          curl $CMD > job.json
          if [ "${{ inputs.debug }}" == "true" ]; then
            cat job.json
            jq < job.json
          fi
          state=$(jq -r .state job.json)
        done

    - name: Get final state of Testing Farm scheduled request
      id: finale_state
      run: |
        curl ${{ secrets.TF_ENDPOINT }}/requests/${{ env.REQ_ID }} > job.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat job.json
          jq < job.json
        fi          
        state=$(jq -r .state job.json)
        result=$(jq -r .result.overall job.json)
        new_state="success"
        infra_error=" "
        echo "State is $state and result is: $result"
        if [ "$state" == "complete" ]; then
          if [ "$result" != "passed" ]; then
            new_state="failure"
          fi
        else
          # Mark job in case of infrastructure issues. Report to Testing Farm team
          infra_error=" - Infra problems"
          new_state="failure"
        fi
        echo "New State is: $new_state"
        echo "Infra state is: $infra_error"
        echo "::set-output name=FINAL_STATE::$new_state"
        echo "::set-output name=INFRA_STATE::$infra_error"

    - name: Switch pull request GitHub status to final state
      run: |
        if [ "${{ inputs.update_pull_request_status }}" == "true" ]; then
          cat << EOF > final.json
          {
            "sha": "${{ steps.sha_value.outputs.SHA }}",
            "state": "${{ steps.final_state.outputs.FINAL_STATE }}",
            "context": "Testing Farm - ${{ inputs.pull_request_status_name }}",
            "description": "Build finished${{ steps.final_state.outputs.INFRA_STATE }}",
            "target_url": "${{ env.TF_URL }}/${{ env.REQ_ID }}"
          }
          EOF
          if [ "${{ inputs.debug }}" == "true" ]; then
            cat final.json
          fi
          # Switch Github status to proper state
          curl -X POST -H "Authorization:
          Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/${{ steps.sha_value.outputs.SHA }} \
          --data @final.json
        fi

    - name: Add comment with Testing Farm request/result to Pull Request
      if: ${{ inputs.create_issue_comment == 'true' }}
      id: github_comment
      uses: actions/github-script@v4
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Testing Farm [request](${{ env.TF_URL }}/${{ env.REQ_ID }})' +
                  ' for ${{ inputs.compose }}/${{ steps.generate_tmt_artifacts.outputs.TMT_ENV_ARTIFACTS }} regression testing has been created. Once finished, results should be available' +
                  ' [here](${{ env.TF_URL }}/${{ env.REQ_ID }}/).' +
                  '\n[Full pipeline log](${{ env.TF_URL }}/${{ env.REQ_ID }}/pipeline.log).'
          })
